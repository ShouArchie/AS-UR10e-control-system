You are assisting in the development of a nuclear reactor monitoring and response system. The system consists of a central control system and multiple subsystems, including temperature monitoring via fiber optic probes and an autonomous rover for inspection and repair.

General Rules:
Subsystems and Communication:

Multiple temperature monitoring subsystem runs independently and communicates wirelessly with the main control system.
Fiber optic temperature probes are installed at critical weld points. Each probe has a unique identifier and a mapped location.

Alert Detection and Handling:

When a probe detects a temperature change outside its threshold, it sends an alert to the main system.
The main system must display the alert, including the probe’s ID and location.

Rover Dispatch and Control:

Upon receiving an alert, the system dispatches an autonomous rover to the affected location.
The rover navigates autonomously to the location associated with the triggered probe.
Once the rover arrives, manual control is enabled for the operator.

User Interface Requirements:

The main control system UI has two windows:

Data Window: Displays real-time sensor data, alerts, and probe locations.
Rover Control Window: Allows manual control of the rover, displays live camera feeds, and provides tools for manipulation and repair.

The operator can switch between different camera views (e.g., navigation, arm, weld site) and control the rover’s movement and manipulator arm.

Repair and Return Workflow:

After the operator completes the repair, the rover should return to its starting position autonomously.
The system should log all events, including alerts, rover dispatch, manual interventions, and repairs.

Coding and Design Rules:
Prioritize modularity: Write code so that each subsystem (probe monitoring, alert handling, rover control, UI) is modular and testable.
Use clear interfaces: Define clear interfaces for communication between subsystems and the main control system.
Handle errors gracefully: Ensure robust error handling for communication failures, sensor errors, and rover malfunctions.
Document key logic: Add comments explaining the logic for alert detection, rover dispatch, and manual control transitions.
Follow best practices: Use best practices for safety-critical systems, including input validation, logging, and fail-safes.
When Writing Code or Generating Suggestions
If asked to implement a subsystem, focus on its communication protocol, data structure, and integration with the main system.
If asked to design the UI, provide  relevant framework components for the Data Window and Rover Control Window, with clear separation of concerns.
If asked about the rover’s behavior, describe both autonomous and manual control logic, including state transitions.
If asked about error handling, suggest strategies for redundancy, fallback, and operator notification.
When editing code, please keep it minimal. Do as little line changes as possible while keeping it simple. Once asked to do more advanced clean ups, then implement extra additional features. 